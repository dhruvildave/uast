// рд╕рдЦреЗрддрд┐ рдорддреНрд╡рд╛ рдкреНрд░рд╕рднрдВ рдпрджреБрдХреНрддрдВ
// рд╣реЗ рдХреГрд╖реНрдг рд╣реЗ рдпрд╛рджрд╡ рд╣реЗ рд╕рдЦреЗрддрд┐ред
// рдЕрдЬрд╛рдирддрд╛ рдорд╣рд┐рдорд╛рдирдВ рддрд╡реЗрджрдВ
// рдордпрд╛ рдкреНрд░рдорд╛рджрд╛рддреНрдкреНрд░рдгрдпреЗрди рд╡рд╛рдкрд┐рее
// рдпрдЪреНрдЪрд╛рд╡рд╣рд╛рд╕рд╛рд░реНрдердорд╕рддреНрдХреГрддреЛрд╜рд╕рд┐
// рд╡рд┐рд╣рд╛рд░рд╢рдпреНрдпрд╛рд╕рдирднреЛрдЬрдиреЗрд╖реБред
// рдПрдХреЛрд╜рдерд╡рд╛рдкреНрдпрдЪреНрдпреБрдд рддрддреНрд╕рдордХреНрд╖рдВ
// рддрддреНрдХреНрд╖рд╛рдордпреЗ рддреНрд╡рд╛рдорд╣рдордкреНрд░рдореЗрдпрдореНрее

type CharMap = Map<string, string>;

type LangMap = {
  numbers: CharMap;
  vowels: CharMap;
  vowelSigns: CharMap;
  consonants: CharMap;
  misc: CharMap;
};

const langs = ["gu", "sa", "ml", "or", "te", "kn", "ta"] as const;
type LangList = typeof langs[number];

const gujaratiCharDict: LangMap = {
  misc: new Map([
    ["ред", "."],
    ["рее", ".."],
    ["рк╜", "'"],
    ["реР", "om"],
  ]),
  numbers: new Map([
    ["рлж", "0"],
    ["рлз", "1"],
    ["рли", "2"],
    ["рлй", "3"],
    ["рлк", "4"],
    ["рлл", "5"],
    ["рлм", "6"],
    ["рлн", "7"],
    ["рло", "8"],
    ["рлп", "9"],
  ]),
  vowels: new Map([
    ["a", "ркЕ"],
    ["─Б", "ркЖ"],
    ["i", "ркЗ"],
    ["─л", "ркИ"],
    ["u", "ркЙ"],
    ["┼л", "ркК"],
    ["с╣Ы", "ркЛ"],
    ["с╣Э", "рла"],
    ["с╕╖", "ркМ"],
    ["с╕╣", "рлб"],
    ["e", "ркП"],
    ["ai", "ркР"],
    ["o", "ркУ"],
    ["au", "ркФ"],
  ]),
  vowelSigns: new Map([
    ["a", ""],
    ["─Б", "рк╛"],
    ["i", "рк┐"],
    ["─л", "рлА"],
    ["u", "рлБ"],
    ["┼л", "рлВ"],
    ["с╣Ы", "рлГ"],
    ["с╣Э", "рлД"],
    ["с╕╖", "рлв"],
    ["с╕╣", "рлг"],
    ["e", "рлЗ"],
    ["ai", "рлИ"],
    ["o", "рлЛ"],
    ["au", "рлМ"],
    ["с╣Г", "ркВ"],
    ["с╕е", "ркГ"],
    ["├г", "ркБ"],
    ["-", "рлН"],
  ]),
  consonants: new Map([
    ["k", "ркХ"],
    ["kh", "ркЦ"],
    ["g", "ркЧ"],
    ["gh", "ркШ"],
    ["с╣Е", "ркЩ"],
    ["c", "ркЪ"],
    ["ch", "ркЫ"],
    ["j", "ркЬ"],
    ["jh", "ркЭ"],
    ["├▒", "ркЮ"],
    ["с╣н", "ркЯ"],
    ["с╣нh", "рка"],
    ["с╕Н", "ркб"],
    ["с╕Нh", "ркв"],
    ["с╣З", "ркг"],
    ["t", "ркд"],
    ["th", "рке"],
    ["d", "ркж"],
    ["dh", "ркз"],
    ["n", "рки"],
    ["p", "ркк"],
    ["ph", "ркл"],
    ["b", "ркм"],
    ["bh", "ркн"],
    ["m", "рко"],
    ["y", "ркп"],
    ["r", "рк░"],
    ["l", "рк▓"],
    ["v", "рк╡"],
    ["┼Ы", "рк╢"],
    ["с╣г", "рк╖"],
    ["s", "рк╕"],
    ["h", "рк╣"],
    ["с╕╗", "рк│"],
  ]),
};

const tamilCharDict: LangMap = {
  misc: new Map([
    ["ред", "."],
    ["рее", ".."],
    ["ЁСМ╜", "'"],
    ["ЁСНР", "om"],
  ]),
  numbers: new Map([
    ["рпж", "0"],
    ["рпз", "1"],
    ["рпи", "2"],
    ["рпй", "3"],
    ["рпк", "4"],
    ["рпл", "5"],
    ["рпм", "6"],
    ["рпн", "7"],
    ["рпо", "8"],
    ["рпп", "9"],
  ]),
  vowels: new Map([
    ["a", "ЁСМЕ"],
    ["─Б", "ЁСМЖ"],
    ["i", "ЁСМЗ"],
    ["─л", "ЁСМИ"],
    ["u", "ЁСМЙ"],
    ["┼л", "ЁСМК"],
    ["с╣Ы", "ЁСМЛ"],
    ["с╣Э", "ЁСНа"],
    ["с╕╖", "ЁСММ"],
    ["с╕╣", "ЁСНб"],
    ["e", "ЁСМП"],
    ["ai", "ЁСМР"],
    ["o", "ЁСМУ"],
    ["au", "ЁСМФ"],
  ]),
  vowelSigns: new Map([
    ["a", ""],
    ["─Б", "ЁСМ╛"],
    ["i", "ЁСМ┐"],
    ["─л", "ЁСНА"],
    ["u", "ЁСНБ"],
    ["┼л", "ЁСНВ"],
    ["с╣Ы", "ЁСНГ"],
    ["с╣Э", "ЁСНД"],
    ["с╕╖", "ЁСНв"],
    ["с╕╣", "ЁСНг"],
    ["e", "ЁСНЗ"],
    ["ai", "ЁСНИ"],
    ["o", "ЁСНЛ"],
    ["au", "ЁСНЧ"],
    ["с╣Г", "ЁСМВ"],
    ["с╕е", "ЁСМГ"],
    ["├г", "ЁСМБ"],
    ["-", "ЁСНН"],
  ]),
  consonants: new Map([
    ["k", "ЁСМХ"],
    ["kh", "ЁСМЦ"],
    ["g", "ЁСМЧ"],
    ["gh", "ЁСМШ"],
    ["с╣Е", "ЁСМЩ"],
    ["c", "ЁСМЪ"],
    ["ch", "ЁСМЫ"],
    ["j", "ЁСМЬ"],
    ["jh", "ЁСМЭ"],
    ["├▒", "ЁСМЮ"],
    ["с╣н", "ЁСМЯ"],
    ["с╣нh", "ЁСМа"],
    ["с╕Н", "ЁСМб"],
    ["с╕Нh", "ЁСМв"],
    ["с╣З", "ЁСМг"],
    ["t", "ЁСМд"],
    ["th", "ЁСМе"],
    ["d", "ЁСМж"],
    ["dh", "ЁСМз"],
    ["n", "ЁСМи"],
    ["p", "ЁСМк"],
    ["ph", "ЁСМл"],
    ["b", "ЁСМм"],
    ["bh", "ЁСМн"],
    ["m", "ЁСМо"],
    ["y", "ЁСМп"],
    ["r", "ЁСМ░"],
    ["l", "ЁСМ▓"],
    ["v", "ЁСМ╡"],
    ["┼Ы", "ЁСМ╢"],
    ["с╣г", "ЁСМ╖"],
    ["s", "ЁСМ╕"],
    ["h", "ЁСМ╣"],
    ["с╕╗", "ЁСМ│"],
  ]),
};

const malayalamCharDict: LangMap = {
  misc: new Map([
    ["ред", "."],
    ["рее", ".."],
    ["р┤╜", "'"],
    ["р┤Ур┤В", "om"],
  ]),
  numbers: new Map([
    ["р╡ж", "0"],
    ["р╡з", "1"],
    ["р╡и", "2"],
    ["р╡й", "3"],
    ["р╡к", "4"],
    ["р╡л", "5"],
    ["р╡м", "6"],
    ["р╡н", "7"],
    ["р╡о", "8"],
    ["р╡п", "9"],
  ]),
  vowels: new Map([
    ["a", "р┤Е"],
    ["─Б", "р┤Ж"],
    ["i", "р┤З"],
    ["─л", "р┤И"],
    ["u", "р┤Й"],
    ["┼л", "р┤К"],
    ["с╣Ы", "р┤Л"],
    ["с╣Э", "р╡а"],
    ["с╕╖", "р┤М"],
    ["с╕╣", "р╡б"],
    ["e", "р┤О"],
    ["ai", "р┤Р"],
    ["o", "р┤Т"],
    ["au", "р┤Ф"],
  ]),
  vowelSigns: new Map([
    ["a", ""],
    ["─Б", "р┤╛"],
    ["i", "р┤┐"],
    ["─л", "р╡А"],
    ["u", "р╡Б"],
    ["┼л", "р╡В"],
    ["с╣Ы", "р╡Г"],
    ["с╣Э", "р╡Д"],
    ["с╕╖", "р╡в"],
    ["с╕╣", "р╡г"],
    ["e", "р╡Ж"],
    ["ai", "р╡И"],
    ["o", "р╡К"],
    ["au", "р╡Ч"],
    ["с╣Г", "р┤В"],
    ["с╕е", "р┤Г"],
    ["├г", "р┤Б"],
    ["-", "р╡Н"],
  ]),
  consonants: new Map([
    ["k", "р┤Х"],
    ["kh", "р┤Ц"],
    ["g", "р┤Ч"],
    ["gh", "р┤Ш"],
    ["с╣Е", "р┤Щ"],
    ["c", "р┤Ъ"],
    ["ch", "р┤Ы"],
    ["j", "р┤Ь"],
    ["jh", "р┤Э"],
    ["├▒", "р┤Ю"],
    ["с╣н", "р┤Я"],
    ["с╣нh", "р┤а"],
    ["с╕Н", "р┤б"],
    ["с╕Нh", "р┤в"],
    ["с╣З", "р┤г"],
    ["t", "р┤д"],
    ["th", "р┤е"],
    ["d", "р┤ж"],
    ["dh", "р┤з"],
    ["n", "р┤и"],
    ["p", "р┤к"],
    ["ph", "р┤л"],
    ["b", "р┤м"],
    ["bh", "р┤н"],
    ["m", "р┤о"],
    ["y", "р┤п"],
    ["r", "р┤░"],
    ["l", "р┤▓"],
    ["v", "р┤╡"],
    ["┼Ы", "р┤╢"],
    ["с╣г", "р┤╖"],
    ["s", "р┤╕"],
    ["h", "р┤╣"],
    ["с╕╗", "р┤│"],
  ]),
};

const teluguCharDict: LangMap = {
  misc: new Map([
    ["ред", "."],
    ["рее", ".."],
    ["р░╜", "'"],
    ["р░Ур░В", "om"],
  ]),
  numbers: new Map([
    ["р▒ж", "0"],
    ["р▒з", "1"],
    ["р▒и", "2"],
    ["р▒й", "3"],
    ["р▒к", "4"],
    ["р▒л", "5"],
    ["р▒м", "6"],
    ["р▒н", "7"],
    ["р▒о", "8"],
    ["р▒п", "9"],
  ]),
  vowels: new Map([
    ["a", "р░Е"],
    ["─Б", "р░Ж"],
    ["i", "р░З"],
    ["─л", "р░И"],
    ["u", "р░Й"],
    ["┼л", "р░К"],
    ["с╣Ы", "р░Л"],
    ["с╣Э", "р▒а"],
    ["с╕╖", "р░М"],
    ["с╕╣", "р▒б"],
    ["e", "р░О"],
    ["ai", "р░Р"],
    ["o", "р░Т"],
    ["au", "р░Ф"],
  ]),
  vowelSigns: new Map([
    ["a", ""],
    ["─Б", "р░╛"],
    ["i", "р░┐"],
    ["─л", "р▒А"],
    ["u", "р▒Б"],
    ["┼л", "р▒В"],
    ["с╣Ы", "р▒Г"],
    ["с╣Э", "р▒Д"],
    ["с╕╖", "р▒в"],
    ["с╕╣", "р▒г"],
    ["e", "р▒Ж"],
    ["ai", "р▒И"],
    ["o", "р▒К"],
    ["au", "р▒М"],
    ["с╣Г", "р░В"],
    ["с╕е", "р░Г"],
    ["├г", "р░Б"],
    ["-", "р▒Н"],
  ]),
  consonants: new Map([
    ["k", "р░Х"],
    ["kh", "р░Ц"],
    ["g", "р░Ч"],
    ["gh", "р░Ш"],
    ["с╣Е", "р░Щ"],
    ["c", "р░Ъ"],
    ["ch", "р░Ы"],
    ["j", "р░Ь"],
    ["jh", "р░Э"],
    ["├▒", "р░Ю"],
    ["с╣н", "р░Я"],
    ["с╣нh", "р░а"],
    ["с╕Н", "р░б"],
    ["с╕Нh", "р░в"],
    ["с╣З", "р░г"],
    ["t", "р░д"],
    ["th", "р░е"],
    ["d", "р░ж"],
    ["dh", "р░з"],
    ["n", "р░и"],
    ["p", "р░к"],
    ["ph", "р░л"],
    ["b", "р░м"],
    ["bh", "р░н"],
    ["m", "р░о"],
    ["y", "р░п"],
    ["r", "р░░"],
    ["l", "р░▓"],
    ["v", "р░╡"],
    ["┼Ы", "р░╢"],
    ["с╣г", "р░╖"],
    ["s", "р░╕"],
    ["h", "р░╣"],
    ["с╕╗", "р░│"],
  ]),
};

const kannadaCharDict: LangMap = {
  misc: new Map([
    ["ред", "."],
    ["рее", ".."],
    ["р▓╜", "'"],
    ["р▓Ур▓В", "om"],
  ]),
  numbers: new Map([
    ["р│ж", "0"],
    ["р│з", "1"],
    ["р│и", "2"],
    ["р│й", "3"],
    ["р│к", "4"],
    ["р│л", "5"],
    ["р│м", "6"],
    ["р│н", "7"],
    ["р│о", "8"],
    ["р│п", "9"],
  ]),
  vowels: new Map([
    ["a", "р▓Е"],
    ["─Б", "р▓Ж"],
    ["i", "р▓З"],
    ["─л", "р▓И"],
    ["u", "р▓Й"],
    ["┼л", "р▓К"],
    ["с╣Ы", "р▓Л"],
    ["с╣Э", "р│а"],
    ["с╕╖", "р▓М"],
    ["с╕╣", "р│б"],
    ["e", "р▓О"],
    ["ai", "р▓Р"],
    ["o", "р▓Т"],
    ["au", "р▓Ф"],
  ]),
  vowelSigns: new Map([
    ["a", ""],
    ["─Б", "р▓╛"],
    ["i", "р▓┐"],
    ["─л", "р│А"],
    ["u", "р│Б"],
    ["┼л", "р│В"],
    ["с╣Ы", "р│Г"],
    ["с╣Э", "р│Д"],
    ["с╕╖", "р│в"],
    ["с╕╣", "р│г"],
    ["e", "р│Ж"],
    ["ai", "р│И"],
    ["o", "р│К"],
    ["au", "р│М"],
    ["с╣Г", "р▓В"],
    ["с╕е", "р▓Г"],
    ["├г", "р▓Б"],
    ["-", "р│Н"],
  ]),
  consonants: new Map([
    ["k", "р▓Х"],
    ["kh", "р▓Ц"],
    ["g", "р▓Ч"],
    ["gh", "р▓Ш"],
    ["с╣Е", "р▓Щ"],
    ["c", "р▓Ъ"],
    ["ch", "р▓Ы"],
    ["j", "р▓Ь"],
    ["jh", "р▓Э"],
    ["├▒", "р▓Ю"],
    ["с╣н", "р▓Я"],
    ["с╣нh", "р▓а"],
    ["с╕Н", "р▓б"],
    ["с╕Нh", "р▓в"],
    ["с╣З", "р▓г"],
    ["t", "р▓д"],
    ["th", "р▓е"],
    ["d", "р▓ж"],
    ["dh", "р▓з"],
    ["n", "р▓и"],
    ["p", "р▓к"],
    ["ph", "р▓л"],
    ["b", "р▓м"],
    ["bh", "р▓н"],
    ["m", "р▓о"],
    ["y", "р▓п"],
    ["r", "р▓░"],
    ["l", "р▓▓"],
    ["v", "р▓╡"],
    ["┼Ы", "р▓╢"],
    ["с╣г", "р▓╖"],
    ["s", "р▓╕"],
    ["h", "р▓╣"],
    ["с╕╗", "р▓│"],
  ]),
};

const odiaCharDict: LangMap = {
  misc: new Map([
    ["ред", "."],
    ["рее", ".."],
    ["рм╜", "'"],
    ["рмУрмБ", "om"],
  ]),
  numbers: new Map([
    ["рнж", "0"],
    ["рнз", "1"],
    ["рни", "2"],
    ["рнй", "3"],
    ["рнк", "4"],
    ["рнл", "5"],
    ["рнм", "6"],
    ["рнн", "7"],
    ["рно", "8"],
    ["рнп", "9"],
  ]),
  vowels: new Map([
    ["a", "рмЕ"],
    ["─Б", "рмЖ"],
    ["i", "рмЗ"],
    ["─л", "рмИ"],
    ["u", "рмЙ"],
    ["┼л", "рмК"],
    ["с╣Ы", "рмЛ"],
    ["с╣Э", "рна"],
    ["с╕╖", "рмМ"],
    ["с╕╣", "рнб"],
    ["e", "рмП"],
    ["ai", "рмР"],
    ["o", "рмУ"],
    ["au", "рмФ"],
  ]),
  vowelSigns: new Map([
    ["a", ""],
    ["─Б", "рм╛"],
    ["i", "рм┐"],
    ["─л", "рнА"],
    ["u", "рнБ"],
    ["┼л", "рнВ"],
    ["с╣Ы", "рнГ"],
    ["с╣Э", "рнД"],
    ["с╕╖", "рнв"],
    ["с╕╣", "рнг"],
    ["e", "рнЗ"],
    ["ai", "рнИ"],
    ["o", "рнЛ"],
    ["au", "рнМ"],
    ["с╣Г", "рмВ"],
    ["с╕е", "рмГ"],
    ["├г", "рмБ"],
    ["-", "рнН"],
  ]),
  consonants: new Map([
    ["k", "рмХ"],
    ["kh", "рмЦ"],
    ["g", "рмЧ"],
    ["gh", "рмШ"],
    ["с╣Е", "рмЩ"],
    ["c", "рмЪ"],
    ["ch", "рмЫ"],
    ["j", "рмЬ"],
    ["jh", "рмЭ"],
    ["├▒", "рмЮ"],
    ["с╣н", "рмЯ"],
    ["с╣нh", "рма"],
    ["с╕Н", "рмб"],
    ["с╕Нh", "рмв"],
    ["с╣З", "рмг"],
    ["t", "рмд"],
    ["th", "рме"],
    ["d", "рмж"],
    ["dh", "рмз"],
    ["n", "рми"],
    ["p", "рмк"],
    ["ph", "рмл"],
    ["b", "рмм"],
    ["bh", "рмн"],
    ["m", "рмо"],
    ["y", "рнЯ"],
    ["r", "рм░"],
    ["l", "рм▓"],
    ["v", "рн▒"],
    ["┼Ы", "рм╢"],
    ["с╣г", "рм╖"],
    ["s", "рм╕"],
    ["h", "рм╣"],
    ["с╕╗", "рм│"],
  ]),
};

const devanagariCharDict: LangMap = {
  misc: new Map([
    ["ред", "."],
    ["рее", ".."],
    ["рд╜", "'"],
    ["реР", "om"],
  ]),
  numbers: new Map([
    ["реж", "0"],
    ["рез", "1"],
    ["реи", "2"],
    ["рей", "3"],
    ["рек", "4"],
    ["рел", "5"],
    ["рем", "6"],
    ["рен", "7"],
    ["рео", "8"],
    ["реп", "9"],
  ]),
  vowels: new Map([
    ["a", "рдЕ"],
    ["─Б", "рдЖ"],
    ["i", "рдЗ"],
    ["─л", "рдИ"],
    ["u", "рдЙ"],
    ["┼л", "рдК"],
    ["с╣Ы", "рдЛ"],
    ["с╣Э", "реа"],
    ["с╕╖", "рдМ"],
    ["с╕╣", "реб"],
    ["e", "рдП"],
    ["ai", "рдР"],
    ["o", "рдУ"],
    ["au", "рдФ"],
  ]),
  vowelSigns: new Map([
    ["a", ""],
    ["─Б", "рд╛"],
    ["i", "рд┐"],
    ["─л", "реА"],
    ["u", "реБ"],
    ["┼л", "реВ"],
    ["с╣Ы", "реГ"],
    ["с╣Э", "реД"],
    ["с╕╖", "рев"],
    ["с╕╣", "рег"],
    ["e", "реЗ"],
    ["ai", "реИ"],
    ["o", "реЛ"],
    ["au", "реМ"],
    ["с╣Г", "рдВ"],
    ["с╕е", "рдГ"],
    ["├г", "рдБ"],
    ["-", "реН"],
  ]),
  consonants: new Map([
    ["k", "рдХ"],
    ["kh", "рдЦ"],
    ["g", "рдЧ"],
    ["gh", "рдШ"],
    ["с╣Е", "рдЩ"],
    ["c", "рдЪ"],
    ["ch", "рдЫ"],
    ["j", "рдЬ"],
    ["jh", "рдЭ"],
    ["├▒", "рдЮ"],
    ["с╣н", "рдЯ"],
    ["с╣нh", "рда"],
    ["с╕Н", "рдб"],
    ["с╕Нh", "рдв"],
    ["с╣З", "рдг"],
    ["t", "рдд"],
    ["th", "рде"],
    ["d", "рдж"],
    ["dh", "рдз"],
    ["n", "рди"],
    ["p", "рдк"],
    ["ph", "рдл"],
    ["b", "рдм"],
    ["bh", "рдн"],
    ["m", "рдо"],
    ["y", "рдп"],
    ["r", "рд░"],
    ["l", "рд▓"],
    ["v", "рд╡"],
    ["┼Ы", "рд╢"],
    ["с╣г", "рд╖"],
    ["s", "рд╕"],
    ["h", "рд╣"],
    ["с╕╗", "рд│"],
  ]),
};

const unicodeMap: CharMap = new Map([
  ["a", "─Б"],
  ["i", "─л"],
  ["u", "┼л"],
  ["r", "с╣Ы"],
  ["ru", "с╣Э"],
  ["l", "с╕╖"],
  ["lu", "с╕╣"],
  ["ll", "с╕╗"],
  ["t", "с╣н"],
  ["d", "с╕Н"],
  ["m", "с╣Г"],
  ["h", "с╕е"],
  ["n", "├▒"],
  ["nu", "с╣Е"],
  ["nl", "с╣З"],
  ["su", "┼Ы"],
  ["sl", "с╣г"],
  [".", "ред"],
  ["..", "рее"],
  ["au", "├г"],
]);

const devanagariDataDict: CharMap = new Map([
  ["рдХ", "k"],
  ["рдЦ", "kh"],
  ["рдЧ", "g"],
  ["рдШ", "gh"],
  ["рдЩ", "/nu/"],
  ["рдЪ", "c"],
  ["рдЫ", "ch"],
  ["рдЬ", "j"],
  ["рдЭ", "jh"],
  ["рдЮ", "/n/"],
  ["рдЯ", "/t/"],
  ["рда", "/t/h"],
  ["рдб", "/d/"],
  ["рдв", "/d/h"],
  ["рдг", "/nl/"],
  ["рдд", "t"],
  ["рде", "th"],
  ["рдж", "d"],
  ["рдз", "dh"],
  ["рди", "n"],
  ["рдк", "p"],
  ["рдл", "ph"],
  ["рдм", "b"],
  ["рдн", "bh"],
  ["рдо", "m"],
  ["рдп", "y"],
  ["рд░", "r"],
  ["рд▓", "l"],
  ["рд╡", "v"],
  ["рд╢", "/su/"],
  ["рд╖", "/sl/"],
  ["рд╕", "s"],
  ["рд╣", "h"],
  ["рд│", "/ll/"],

  ["рдЕ", "a"],
  ["рдЖ", "/a/"],
  ["рдЗ", "i"],
  ["рдИ", "/i/"],
  ["рдЙ", "u"],
  ["рдК", "/u/"],
  ["рдЛ", "/r/"],
  ["реа", "/ru/"],
  ["рдМ", "/l/"],
  ["реб", "/lu/"],
  ["рдП", "e"],
  ["рдР", "ai"],
  ["рдУ", "o"],
  ["рдФ", "au"],

  ["", "a"],
  ["рд╛", "/a/"],
  ["рд┐", "i"],
  ["реА", "/i/"],
  ["реБ", "u"],
  ["реВ", "/u/"],
  ["реГ", "/r/"],
  ["реД", "/ru/"],
  ["рев", "/l/"],
  ["рег", "/lu/"],
  ["реЗ", "e"],
  ["реИ", "ai"],
  ["реЛ", "o"],
  ["реМ", "au"],
  ["рдВ", "/m/"],
  ["рдГ", "/h/"],
  ["рдБ", "/au/"],
  ["реН", "-"],

  ["рд╜", "\\/'/\\"],
  ["ред", "\\/./\\"],
  ["рее", "\\/../\\"],
  ["реР", "\\/om/\\"],

  ["реж", "\\/0/\\"],
  ["рез", "\\/1/\\"],
  ["реи", "\\/2/\\"],
  ["рей", "\\/3/\\"],
  ["рек", "\\/4/\\"],
  ["рел", "\\/5/\\"],
  ["рем", "\\/6/\\"],
  ["рен", "\\/7/\\"],
  ["рео", "\\/8/\\"],
  ["реп", "\\/9/\\"],
]);

const iastDataDict: CharMap = new Map([
  ["реж", "0"],
  ["рез", "1"],
  ["реи", "2"],
  ["рей", "3"],
  ["рек", "4"],
  ["рел", "5"],
  ["рем", "6"],
  ["рен", "7"],
  ["рео", "8"],
  ["реп", "9"],
  ["─Б", "a"],
  ["─л", "i"],
  ["┼л", "u"],
  ["с╣Ы", "r"],
  ["с╣Э", "ru"],
  ["с╕╖", "l"],
  ["с╕╣", "lu"],
  ["с╕╗", "ll"],
  ["с╣н", "t"],
  ["с╕Н", "d"],
  ["с╣Г", "m"],
  ["с╕е", "h"],
  ["├▒", "n"],
  ["с╣Е", "nu"],
  ["с╣З", "nl"],
  ["┼Ы", "su"],
  ["с╣г", "sl"],
  ["рд╜", "'"],
  ["ред", "."],
  ["рее", ".."],
  ["реР", "om"],
  ["├г", "au"],
]);

const unAspiratedConsonants: string[] = [
  "k",
  "g",
  "c",
  "j",
  "t",
  "d",
  "p",
  "b",
  "с╣н",
  "с╕Н",
];

const slpDataDict: CharMap = new Map([
  ["a", "a"],
  ["A", "─Б"],
  ["i", "i"],
  ["I", "─л"],
  ["u", "u"],
  ["U", "┼л"],
  ["e", "e"],
  ["E", "ai"],
  ["o", "o"],
  ["O", "au"],
  ["f", "с╣Ы"],
  ["F", "с╣Э"],
  ["x", "с╕╖"],
  ["X", "с╕╣"],
  ["L", "с╕╗"],
  ["|", "с╕╗h"],
  ["k", "k"],
  ["K", "kh"],
  ["g", "g"],
  ["G", "gh"],
  ["N", "с╣Е"],
  ["c", "c"],
  ["C", "ch"],
  ["j", "j"],
  ["J", "jh"],
  ["Y", "├▒"],
  ["w", "с╣н"],
  ["W", "с╣нh"],
  ["q", "с╕Н"],
  ["Q", "с╕Нh"],
  ["R", "с╣З"],
  ["t", "t"],
  ["T", "th"],
  ["d", "d"],
  ["D", "dh"],
  ["n", "n"],
  ["p", "p"],
  ["P", "ph"],
  ["b", "b"],
  ["B", "bh"],
  ["m", "m"],
  ["M", "с╣Г"],
  ["H", "с╕е"],
  ["y", "y"],
  ["r", "r"],
  ["l", "l"],
  ["v", "v"],
  ["S", "┼Ы"],
  ["z", "с╣г"],
  ["s", "s"],
  ["h", "h"],
  ["'", "'"],
  ["~", "├г"],
]);

function createScriptMap(obj: {
  readonly [k in
    | "0"
    | "1"
    | "2"
    | "3"
    | "4"
    | "5"
    | "6"
    | "7"
    | "8"
    | "9"
    | "om"
    | "'"]: string;
}): CharMap {
  return new Map(Object.entries(obj));
}

/**
 * Function to map special characters to Unicode
 *
 * @param lang input UAST string
 * @returns parsed AnDy output string
 */
function createHandleUnicode(lang: LangList): (uast: string) => string {
  let scriptMap: CharMap = createScriptMap({
    "0": "реж",
    "1": "рез",
    "2": "реи",
    "3": "рей",
    "4": "рек",
    "5": "рел",
    "6": "рем",
    "7": "рен",
    "8": "рео",
    "9": "реп",
    om: "реР",
    "'": "рд╜",
  });

  switch (lang) {
    case "gu":
      scriptMap = createScriptMap({
        "0": "рлж",
        "1": "рлз",
        "2": "рли",
        "3": "рлй",
        "4": "рлк",
        "5": "рлл",
        "6": "рлм",
        "7": "рлн",
        "8": "рло",
        "9": "рлп",
        om: "реР",
        "'": "рк╜",
      });
      break;

    case "or":
      scriptMap = createScriptMap({
        "0": "рнж",
        "1": "рнз",
        "2": "рни",
        "3": "рнй",
        "4": "рнк",
        "5": "рнл",
        "6": "рнм",
        "7": "рнн",
        "8": "рно",
        "9": "рнп",
        om: "рмУрмБ",
        "'": "рм╜",
      });
      break;

    case "kn":
      scriptMap = createScriptMap({
        "0": "р│ж",
        "1": "р│з",
        "2": "р│и",
        "3": "р│й",
        "4": "р│к",
        "5": "р│л",
        "6": "р│м",
        "7": "р│н",
        "8": "р│о",
        "9": "р│п",
        om: "р▓Ур▓В",
        "'": "р▓╜",
      });
      break;

    case "te":
      scriptMap = createScriptMap({
        "0": "р▒ж",
        "1": "р▒з",
        "2": "р▒и",
        "3": "р▒й",
        "4": "р▒к",
        "5": "р▒л",
        "6": "р▒м",
        "7": "р▒н",
        "8": "р▒о",
        "9": "р▒п",
        "'": "р░╜",
        om: "р░Ур░В",
      });
      break;

    case "ml":
      scriptMap = createScriptMap({
        "0": "р╡ж",
        "1": "р╡з",
        "2": "р╡и",
        "3": "р╡й",
        "4": "р╡к",
        "5": "р╡л",
        "6": "р╡м",
        "7": "р╡н",
        "8": "р╡о",
        "9": "р╡п",
        "'": "р┤╜",
        om: "р┤Ур┤В",
      });
      break;

    case "ta":
      scriptMap = createScriptMap({
        "0": "рпж",
        "1": "рпз",
        "2": "рпи",
        "3": "рпй",
        "4": "рпк",
        "5": "рпл",
        "6": "рпм",
        "7": "рпн",
        "8": "рпо",
        "9": "рпп",
        "'": "ЁСМ╜",
        om: "ЁСНР",
      });
      break;

    default:
      break;
  }

  const scriptDict: CharMap = new Map([...unicodeMap, ...scriptMap]);

  return function handleUnicode(uast: string): string {
    uast = uast.toLowerCase();

    if (uast.startsWith("\\")) {
      uast = uast.slice(1);
    }

    if (uast.endsWith("\\")) {
      uast = uast.slice(0, uast.length - 1);
    }

    const str = Array.from(uast);
    let arr: string[] = [];

    for (let i = 0; i < str.length; ) {
      let curr = str.at(i) ?? "";

      if (str.at(i) === "/") {
        let char: string[] = [];

        for (let j = i + 1; j < str.length; j++) {
          let curr = str.at(j) ?? "";

          if (curr === "/") {
            i = j;
            break;
          }

          if (j === str.length - 1) {
            i = j;
          }

          char.push(curr);
        }

        arr.push(scriptDict.get(char.join("")) ?? "");
        i++;
        continue;
      }

      arr.push(curr);
      i++;
    }

    return arr.join("").normalize();
  };
}

function createScriptDict(obj: {
  readonly [k in
    | "ред"
    | "рее"
    | "рд╜"
    | "реР"
    | "реж"
    | "рез"
    | "реи"
    | "рей"
    | "рек"
    | "рел"
    | "рем"
    | "рен"
    | "рео"
    | "реп"
    | "рдЕ"
    | "рдЖ"
    | "рдЗ"
    | "рдИ"
    | "рдЙ"
    | "рдК"
    | "рдЛ"
    | "реа"
    | "рдМ"
    | "реб"
    | "рдП"
    | "рдР"
    | "рдУ"
    | "рдФ"
    | "рд╛"
    | "рд┐"
    | "реА"
    | "реБ"
    | "реВ"
    | "реГ"
    | "реД"
    | "рев"
    | "рег"
    | "реЗ"
    | "реИ"
    | "реЛ"
    | "реМ"
    | "рдВ"
    | "рдГ"
    | "рдБ"
    | "реН"
    | "рдХ"
    | "рдЦ"
    | "рдЧ"
    | "рдШ"
    | "рдЩ"
    | "рдЪ"
    | "рдЫ"
    | "рдЬ"
    | "рдЭ"
    | "рдЮ"
    | "рдЯ"
    | "рда"
    | "рдб"
    | "рдв"
    | "рдг"
    | "рдд"
    | "рде"
    | "рдж"
    | "рдз"
    | "рди"
    | "рдк"
    | "рдл"
    | "рдм"
    | "рдн"
    | "рдо"
    | "рдп"
    | "рд░"
    | "рд▓"
    | "рд╡"
    | "рд╢"
    | "рд╖"
    | "рд╕"
    | "рд╣"
    | "рд│"]: string;
}): readonly [string, string][] {
  return Object.entries(obj).map(i => [i[1], i[0]]);
}

function createScriptFunction(lang: LangList): (data: string) => string {
  let obj: CharMap;

  switch (lang) {
    case "gu":
      obj = new Map(
        createScriptDict({
          "ред": "ред",
          "рее": "рее",
          рд╜: "рк╜",
          реР: "реР",
          "реж": "рлж",
          "рез": "рлз",
          "реи": "рли",
          "рей": "рлй",
          "рек": "рлк",
          "рел": "рлл",
          "рем": "рлм",
          "рен": "рлн",
          "рео": "рло",
          "реп": "рлп",
          рдЕ: "ркЕ",
          рдЖ: "ркЖ",
          рдЗ: "ркЗ",
          рдИ: "ркИ",
          рдЙ: "ркЙ",
          рдК: "ркК",
          рдЛ: "ркЛ",
          реа: "рла",
          рдМ: "ркМ",
          реб: "рлб",
          рдП: "ркП",
          рдР: "ркР",
          рдУ: "ркУ",
          рдФ: "ркФ",
          "рд╛": "рк╛",
          "рд┐": "рк┐",
          "реА": "рлА",
          "реБ": "рлБ",
          "реВ": "рлВ",
          "реГ": "рлГ",
          "реД": "рлД",
          "рев": "рлв",
          "рег": "рлг",
          "реЗ": "рлЗ",
          "реИ": "рлИ",
          "реЛ": "рлЛ",
          "реМ": "рлМ",
          "рдВ": "ркВ",
          "рдГ": "ркГ",
          "рдБ": "ркБ",
          "реН": "рлН",
          рдХ: "ркХ",
          рдЦ: "ркЦ",
          рдЧ: "ркЧ",
          рдШ: "ркШ",
          рдЩ: "ркЩ",
          рдЪ: "ркЪ",
          рдЫ: "ркЫ",
          рдЬ: "ркЬ",
          рдЭ: "ркЭ",
          рдЮ: "ркЮ",
          рдЯ: "ркЯ",
          рда: "рка",
          рдб: "ркб",
          рдв: "ркв",
          рдг: "ркг",
          рдд: "ркд",
          рде: "рке",
          рдж: "ркж",
          рдз: "ркз",
          рди: "рки",
          рдк: "ркк",
          рдл: "ркл",
          рдм: "ркм",
          рдн: "ркн",
          рдо: "рко",
          рдп: "ркп",
          рд░: "рк░",
          рд▓: "рк▓",
          рд╡: "рк╡",
          рд╢: "рк╢",
          рд╖: "рк╖",
          рд╕: "рк╕",
          рд╣: "рк╣",
          рд│: "рк│",
        })
      );
      break;

    case "or":
      obj = new Map(
        createScriptDict({
          "ред": "ред",
          "рее": "рее",
          рд╜: "рм╜",
          реР: "рмУрмБ",
          "реж": "рнж",
          "рез": "рнз",
          "реи": "рни",
          "рей": "рнй",
          "рек": "рнк",
          "рел": "рнл",
          "рем": "рнм",
          "рен": "рнн",
          "рео": "рно",
          "реп": "рнп",
          рдЕ: "рмЕ",
          рдЖ: "рмЖ",
          рдЗ: "рмЗ",
          рдИ: "рмИ",
          рдЙ: "рмЙ",
          рдК: "рмК",
          рдЛ: "рмЛ",
          реа: "рна",
          рдМ: "рмМ",
          реб: "рнб",
          рдП: "рмП",
          рдР: "рмР",
          рдУ: "рмУ",
          рдФ: "рмФ",
          "рд╛": "рм╛",
          "рд┐": "рм┐",
          "реА": "рнА",
          "реБ": "рнБ",
          "реВ": "рнВ",
          "реГ": "рнГ",
          "реД": "рнД",
          "рев": "рнв",
          "рег": "рнг",
          "реЗ": "рнЗ",
          "реИ": "рнИ",
          "реЛ": "рнЛ",
          "реМ": "рнМ",
          "рдВ": "рмВ",
          "рдГ": "рмГ",
          "рдБ": "рмБ",
          "реН": "рнН",
          рдХ: "рмХ",
          рдЦ: "рмЦ",
          рдЧ: "рмЧ",
          рдШ: "рмШ",
          рдЩ: "рмЩ",
          рдЪ: "рмЪ",
          рдЫ: "рмЫ",
          рдЬ: "рмЬ",
          рдЭ: "рмЭ",
          рдЮ: "рмЮ",
          рдЯ: "рмЯ",
          рда: "рма",
          рдб: "рмб",
          рдв: "рмв",
          рдг: "рмг",
          рдд: "рмд",
          рде: "рме",
          рдж: "рмж",
          рдз: "рмз",
          рди: "рми",
          рдк: "рмк",
          рдл: "рмл",
          рдм: "рмм",
          рдн: "рмн",
          рдо: "рмо",
          рдп: "рнЯ",
          рд░: "рм░",
          рд▓: "рм▓",
          рд╡: "рн▒",
          рд╢: "рм╢",
          рд╖: "рм╖",
          рд╕: "рм╕",
          рд╣: "рм╣",
          рд│: "рм│",
        })
      );
      break;

    case "kn":
      obj = new Map(
        createScriptDict({
          "ред": "ред",
          "рее": "рее",
          рд╜: "р▓╜",
          реР: "р▓Ур▓В",
          "реж": "р│ж",
          "рез": "р│з",
          "реи": "р│и",
          "рей": "р│й",
          "рек": "р│к",
          "рел": "р│л",
          "рем": "р│м",
          "рен": "р│н",
          "рео": "р│о",
          "реп": "р│п",
          рдЕ: "р▓Е",
          рдЖ: "р▓Ж",
          рдЗ: "р▓З",
          рдИ: "р▓И",
          рдЙ: "р▓Й",
          рдК: "р▓К",
          рдЛ: "р▓Л",
          реа: "р│а",
          рдМ: "р▓М",
          реб: "р│б",
          рдП: "р▓О",
          рдР: "р▓Р",
          рдУ: "р▓Т",
          рдФ: "р▓Ф",
          "рд╛": "р▓╛",
          "рд┐": "р▓┐",
          "реА": "р│А",
          "реБ": "р│Б",
          "реВ": "р│В",
          "реГ": "р│Г",
          "реД": "р│Д",
          "рев": "р│в",
          "рег": "р│г",
          "реЗ": "р│Ж",
          "реИ": "р│И",
          "реЛ": "р│К",
          "реМ": "р│М",
          "рдВ": "р▓В",
          "рдГ": "р▓Г",
          "рдБ": "р▓Б",
          "реН": "р│Н",
          рдХ: "р▓Х",
          рдЦ: "р▓Ц",
          рдЧ: "р▓Ч",
          рдШ: "р▓Ш",
          рдЩ: "р▓Щ",
          рдЪ: "р▓Ъ",
          рдЫ: "р▓Ы",
          рдЬ: "р▓Ь",
          рдЭ: "р▓Э",
          рдЮ: "р▓Ю",
          рдЯ: "р▓Я",
          рда: "р▓а",
          рдб: "р▓б",
          рдв: "р▓в",
          рдг: "р▓г",
          рдд: "р▓д",
          рде: "р▓е",
          рдж: "р▓ж",
          рдз: "р▓з",
          рди: "р▓и",
          рдк: "р▓к",
          рдл: "р▓л",
          рдм: "р▓м",
          рдн: "р▓н",
          рдо: "р▓о",
          рдп: "р▓п",
          рд░: "р▓░",
          рд▓: "р▓▓",
          рд╡: "р▓╡",
          рд╢: "р▓╢",
          рд╖: "р▓╖",
          рд╕: "р▓╕",
          рд╣: "р▓╣",
          рд│: "р▓│",
        })
      );
      break;

    case "te":
      obj = new Map(
        createScriptDict({
          "ред": "ред",
          "рее": "рее",
          рд╜: "р░╜",
          реР: "р░Ур░В",
          "реж": "р▒ж",
          "рез": "р▒з",
          "реи": "р▒и",
          "рей": "р▒й",
          "рек": "р▒к",
          "рел": "р▒л",
          "рем": "р▒м",
          "рен": "р▒н",
          "рео": "р▒о",
          "реп": "р▒п",
          рдЕ: "р░Е",
          рдЖ: "р░Ж",
          рдЗ: "р░З",
          рдИ: "р░И",
          рдЙ: "р░Й",
          рдК: "р░К",
          рдЛ: "р░Л",
          реа: "р▒а",
          рдМ: "р░М",
          реб: "р▒б",
          рдП: "р░О",
          рдР: "р░Р",
          рдУ: "р░Т",
          рдФ: "р░Ф",
          "рд╛": "р░╛",
          "рд┐": "р░┐",
          "реА": "р▒А",
          "реБ": "р▒Б",
          "реВ": "р▒В",
          "реГ": "р▒Г",
          "реД": "р▒Д",
          "рев": "р▒в",
          "рег": "р▒г",
          "реЗ": "р▒Ж",
          "реИ": "р▒И",
          "реЛ": "р▒К",
          "реМ": "р▒М",
          "рдВ": "р░В",
          "рдГ": "р░Г",
          "рдБ": "р░Б",
          "реН": "р▒Н",
          рдХ: "р░Х",
          рдЦ: "р░Ц",
          рдЧ: "р░Ч",
          рдШ: "р░Ш",
          рдЩ: "р░Щ",
          рдЪ: "р░Ъ",
          рдЫ: "р░Ы",
          рдЬ: "р░Ь",
          рдЭ: "р░Э",
          рдЮ: "р░Ю",
          рдЯ: "р░Я",
          рда: "р░а",
          рдб: "р░б",
          рдв: "р░в",
          рдг: "р░г",
          рдд: "р░д",
          рде: "р░е",
          рдж: "р░ж",
          рдз: "р░з",
          рди: "р░и",
          рдк: "р░к",
          рдл: "р░л",
          рдм: "р░м",
          рдн: "р░н",
          рдо: "р░о",
          рдп: "р░п",
          рд░: "р░░",
          рд▓: "р░▓",
          рд╡: "р░╡",
          рд╢: "р░╢",
          рд╖: "р░╖",
          рд╕: "р░╕",
          рд╣: "р░╣",
          рд│: "р░│",
        })
      );
      break;

    case "ml":
      obj = new Map(
        createScriptDict({
          "ред": "ред",
          "рее": "рее",
          рд╜: "р┤╜",
          реР: "р┤Ур┤В",
          "реж": "р╡ж",
          "рез": "р╡з",
          "реи": "р╡и",
          "рей": "р╡й",
          "рек": "р╡к",
          "рел": "р╡л",
          "рем": "р╡м",
          "рен": "р╡н",
          "рео": "р╡о",
          "реп": "р╡п",
          рдЕ: "р┤Е",
          рдЖ: "р┤Ж",
          рдЗ: "р┤З",
          рдИ: "р┤И",
          рдЙ: "р┤Й",
          рдК: "р┤К",
          рдЛ: "р┤Л",
          реа: "р╡а",
          рдМ: "р┤М",
          реб: "р╡б",
          рдП: "р┤О",
          рдР: "р┤Р",
          рдУ: "р┤Т",
          рдФ: "р┤Ф",
          "рд╛": "р┤╛",
          "рд┐": "р┤┐",
          "реА": "р╡А",
          "реБ": "р╡Б",
          "реВ": "р╡В",
          "реГ": "р╡Г",
          "реД": "р╡Д",
          "рев": "р╡в",
          "рег": "р╡г",
          "реЗ": "р╡Ж",
          "реИ": "р╡И",
          "реЛ": "р╡К",
          "реМ": "р╡Ч",
          "рдВ": "р┤В",
          "рдГ": "р┤Г",
          "рдБ": "р┤Б",
          "реН": "р╡Н",
          рдХ: "р┤Х",
          рдЦ: "р┤Ц",
          рдЧ: "р┤Ч",
          рдШ: "р┤Ш",
          рдЩ: "р┤Щ",
          рдЪ: "р┤Ъ",
          рдЫ: "р┤Ы",
          рдЬ: "р┤Ь",
          рдЭ: "р┤Э",
          рдЮ: "р┤Ю",
          рдЯ: "р┤Я",
          рда: "р┤а",
          рдб: "р┤б",
          рдв: "р┤в",
          рдг: "р┤г",
          рдд: "р┤д",
          рде: "р┤е",
          рдж: "р┤ж",
          рдз: "р┤з",
          рди: "р┤и",
          рдк: "р┤к",
          рдл: "р┤л",
          рдм: "р┤м",
          рдн: "р┤н",
          рдо: "р┤о",
          рдп: "р┤п",
          рд░: "р┤░",
          рд▓: "р┤▓",
          рд╡: "р┤╡",
          рд╢: "р┤╢",
          рд╖: "р┤╖",
          рд╕: "р┤╕",
          рд╣: "р┤╣",
          рд│: "р┤│",
        })
      );
      break;

    case "ta":
      obj = new Map(
        createScriptDict({
          "ред": "ред",
          "рее": "рее",
          рд╜: "ЁСМ╜",
          реР: "ЁСНР",
          "реж": "рпж",
          "рез": "рпз",
          "реи": "рпи",
          "рей": "рпй",
          "рек": "рпк",
          "рел": "рпл",
          "рем": "рпм",
          "рен": "рпн",
          "рео": "рпо",
          "реп": "рпп",
          рдЕ: "ЁСМЕ",
          рдЖ: "ЁСМЖ",
          рдЗ: "ЁСМЗ",
          рдИ: "ЁСМИ",
          рдЙ: "ЁСМЙ",
          рдК: "ЁСМК",
          рдЛ: "ЁСМЛ",
          реа: "ЁСНа",
          рдМ: "ЁСММ",
          реб: "ЁСНб",
          рдП: "ЁСМП",
          рдР: "ЁСМР",
          рдУ: "ЁСМУ",
          рдФ: "ЁСМФ",
          "рд╛": "ЁСМ╛",
          "рд┐": "ЁСМ┐",
          "реА": "ЁСНА",
          "реБ": "ЁСНБ",
          "реВ": "ЁСНВ",
          "реГ": "ЁСНГ",
          "реД": "ЁСНД",
          "рев": "ЁСНв",
          "рег": "ЁСНг",
          "реЗ": "ЁСНЗ",
          "реИ": "ЁСНИ",
          "реЛ": "ЁСНЛ",
          "реМ": "ЁСНЧ",
          "рдВ": "ЁСМВ",
          "рдГ": "ЁСМГ",
          "рдБ": "ЁСМБ",
          "реН": "ЁСНН",
          рдХ: "ЁСМХ",
          рдЦ: "ЁСМЦ",
          рдЧ: "ЁСМЧ",
          рдШ: "ЁСМШ",
          рдЩ: "ЁСМЩ",
          рдЪ: "ЁСМЪ",
          рдЫ: "ЁСМЫ",
          рдЬ: "ЁСМЬ",
          рдЭ: "ЁСМЭ",
          рдЮ: "ЁСМЮ",
          рдЯ: "ЁСМЯ",
          рда: "ЁСМа",
          рдб: "ЁСМб",
          рдв: "ЁСМв",
          рдг: "ЁСМг",
          рдд: "ЁСМд",
          рде: "ЁСМе",
          рдж: "ЁСМж",
          рдз: "ЁСМз",
          рди: "ЁСМи",
          рдк: "ЁСМк",
          рдл: "ЁСМл",
          рдм: "ЁСМм",
          рдн: "ЁСМн",
          рдо: "ЁСМо",
          рдп: "ЁСМп",
          рд░: "ЁСМ░",
          рд▓: "ЁСМ▓",
          рд╡: "ЁСМ╡",
          рд╢: "ЁСМ╢",
          рд╖: "ЁСМ╖",
          рд╕: "ЁСМ╕",
          рд╣: "ЁСМ╣",
          рд│: "ЁСМ│",
        })
      );
      break;

    case "sa":
      obj = new Map();
      break;

    default:
      break;
  }

  return function scriptToDevanagari(data: string): string {
    return Array.from(data)
      .map(i => obj.get(i) ?? "")
      .join("")
      .normalize();
  };
}

/**
 * Convert AnDy to IAST
 *
 * @param data Parsed AnDy string
 * @returns IAST string
 */
function dataToIAST(data: string): string {
  return data
    .normalize()
    .replaceAll(/[\[\]^~@#$%&*_;\n\v\t\r\f\d]/gu, "")
    .split("\\")
    .map(split => {
      if (split === "реР") {
        return "oс╣Г";
      }

      if (devanagariCharDict.numbers.has(split)) {
        return devanagariCharDict.numbers.get(split);
      }

      if (devanagariCharDict.misc.has(split)) {
        return devanagariCharDict.misc.get(split);
      }

      if (split === "с╕е" || split === "с╣Г" || split === "├г") {
        return split;
      }

      const str = Array.from(split);

      let arr: string[] = [];

      for (let i = 0; i < str.length; ) {
        const curr = str.at(i) ?? "";

        if (curr === "'") {
          // arr.push("реС");
          i++;
          continue;
        }

        if (curr === "`") {
          // arr.push("реТ");
          i++;
          continue;
        }

        if ([",", "?", "!", '"', "-", ":", "(", ")", "="].includes(curr)) {
          arr.push(curr);
          i++;
          continue;
        }

        const next = str.at(i + 1) ?? "";

        if (next === "с╕е" || next === "с╣Г" || next === "├г") {
          if (devanagariCharDict.consonants.has(curr)) {
            arr.push(`${curr}a${next}`);
          } else {
            arr.push(`${curr}${next}`);
          }

          i += 2;
          continue;
        }

        if (devanagariCharDict.vowels.has(curr)) {
          arr.push(curr);
          i++;

          continue;
        }

        if (i === str.length - 1) {
          if (curr === "с╕е" || curr === "с╣Г" || curr === "├г") {
            arr.push(curr);
            i++;
            continue;
          }

          arr.push(`${curr}a`);
          i++;
          continue;
        }

        if (next === "h" && unAspiratedConsonants.includes(curr)) {
          const last = str.at(i + 2) ?? "";
          if (devanagariCharDict.vowelSigns.has(last) === false) {
            arr.push(`${curr}${next}a`);
            i += 2;
            continue;
          }

          if (last === "с╕е" || last === "с╣Г" || last === "├г") {
            arr.push(`${curr}${next}a${last}`);
            i += 3;
            continue;
          }

          if (last === "-") {
            i += 3;
          } else {
            i += 2;
          }
          arr.push(`${curr}${next}`);

          continue;
        }

        if (next === "-") {
          arr.push(curr);
          i += 2;
          continue;
        }

        if (devanagariCharDict.vowelSigns.has(next)) {
          arr.push(curr);
          i++;
          continue;
        }

        if (curr === "с╕е" || curr === "с╣Г" || curr === "├г") {
          arr.push(curr);
          i++;
          continue;
        }

        arr.push(`${curr}a`);
        i++;
      }

      return arr.join("");
    })
    .join("")
    .normalize();
}

/**
 * Convert IAST to UAST
 *
 * @param data IAST string
 * @returns UAST string
 */
function iastToUAST(data: string): string {
  const str = Array.from(
    data.normalize().replaceAll(/[\[\]^~@#$%&*\-_;]/gu, "")
  );
  let arr: string[] = [];

  for (let i = 0; i < str.length; ) {
    const curr = str.at(i) ?? "";
    const next = str.at(i + 1) ?? "";

    if (devanagariCharDict.consonants.has(curr)) {
      if (unAspiratedConsonants.includes(curr)) {
        if (next === "a" && (str.at(i + 2) ?? "") === "h") {
          arr.push(`${curr}\\`);
          i += 2;
          continue;
        }

        if (next === "h") {
          let last = str.at(i + 2) ?? "";
          if (devanagariCharDict.consonants.has(last)) {
            arr.push(`${curr}${next}-`);
            i += 2;
            continue;
          }

          if (last === "a") {
            last = str.at(i + 3) ?? "";
            if (last === "i" || last === "u") {
              arr.push(`${curr}${next}a${last}`);
              i += 4;
              continue;
            }
            i += 3;
          } else {
            i += 2;
          }

          arr.push(`${curr}${next}`);

          continue;
        }
      }

      if (next === "a") {
        const last = str.at(i + 2) ?? "";
        if (last === "i" || last === "u") {
          arr.push(`${curr}a${last}`);
          i += 3;
          continue;
        }

        arr.push(curr);
        i += 2;
        continue;
      }

      if (
        devanagariCharDict.consonants.has(next) ||
        [".", "..", "'"].includes(next) ||
        i === str.length - 1
      ) {
        arr.push(`${curr}-`);
        i++;
        continue;
      }

      arr.push(curr);
      i++;
      continue;
    }

    if (curr === "a" && (next === "i" || next === "u")) {
      arr.push(`${curr}${next}\\`);
      i += 2;
      continue;
    }

    if (
      devanagariCharDict.vowels.has(curr) &&
      devanagariCharDict.consonants.has(next)
    ) {
      arr.push(`${curr}\\`);
      i++;
      continue;
    }

    arr.push(curr);
    i++;
  }

  let ans: string[] = [];

  for (let k = 0; k < arr.length; k++) {
    let curr = arr[k] ?? "";

    const hasDash = curr.includes("-") ? true : false;

    curr = curr.replaceAll(/[\\-]/gu, "");
    for (let j of [...devanagariCharDict.misc.values()]
      .filter(i => ["om", ".."].includes(i) === false)
      .concat([...devanagariCharDict.numbers.values()])) {
      if (curr === "." && arr[k + 1] === ".") {
        curr = curr.replaceAll(curr, "\\/../\\");
        k++;
        continue;
      }

      curr = curr.replaceAll(j, `\\/${j}/\\`);
    }

    ans.push(
      curr +
        (unAspiratedConsonants.includes(curr) && (arr[k + 1] ?? "") === "h"
          ? "a"
          : "") +
        (hasDash ? "-" : "") +
        (devanagariCharDict.vowels.has(curr) ? "\\" : "")
    );
  }

  if (
    devanagariCharDict.consonants.has(ans.at(-1) ?? "") &&
    (str.at(-1) ?? "") !== "a"
  ) {
    ans.push("-");
  }

  return Array.from(ans.join(""))
    .map(i => (iastDataDict.has(i) ? `/${iastDataDict.get(i)}/` : i))
    .join("")
    .normalize();
}

/**
 * Function to create the function of parser
 *
 * @param lang Language to choose as renderer
 * @returns Function that can parse the `lang`
 */
function createDataFunction(lang: LangList): (data: string) => string {
  let obj: LangMap = devanagariCharDict;

  switch (lang) {
    case "gu":
      obj = gujaratiCharDict;
      break;

    case "or":
      obj = odiaCharDict;
      break;

    case "kn":
      obj = kannadaCharDict;
      break;

    case "te":
      obj = teluguCharDict;
      break;

    case "ml":
      obj = malayalamCharDict;
      break;

    case "ta":
      obj = tamilCharDict;
      break;

    default:
      break;
  }

  return function dataToScript(data: string): string {
    return data
      .split("\\")
      .map(split => {
        if (obj.misc.has(split) || obj.numbers.has(split)) {
          return split;
        }

        if (obj.vowels.has(split)) {
          return obj.vowels.get(split);
        }

        let arr: string[] = [];

        const str = Array.from(split);

        for (let i = 0; i < str.length; ) {
          const curr = str[i] ?? "";

          if (lang === "sa") {
            if (curr === "'") {
              arr.push("реС");
              i++;
              continue;
            }

            if (curr === "`") {
              arr.push("реТ");
              i++;
              continue;
            }
          }

          if ([",", "?", "!", '"', ":", "(", ")", "="].includes(curr)) {
            arr.push(curr);
            i++;
            continue;
          }

          if (unAspiratedConsonants.includes(curr)) {
            let consonant: string = "";
            if (str[i + 1] === "h") {
              consonant = str.slice(i, i + 2).join("");
              i += 2;
            } else {
              consonant = curr;
              i++;
            }
            arr.push(obj.consonants.get(consonant) ?? "");

            continue;
          }

          arr.push(obj.consonants.get(curr) ?? "");

          let vowel: string = "";
          if (curr === "a" && (str[i + 1] === "i" || str[i + 1] === "u")) {
            vowel = str.slice(i, i + 2).join("");
            i += 2;
          } else {
            vowel = curr;
            i++;
          }

          arr.push(obj.vowelSigns.get(vowel) ?? "");
        }

        return arr.join("");
      })
      .join("")
      .normalize();
  };
}

/**
 * Convert рджреЗрд╡рдирд╛рдЧрд░реА to UAST
 *
 * @param data рджреЗрд╡рдирд╛рдЧрд░реА string
 * @returns UAST string
 */
function devanagariToUAST(data: string): string {
  const str = Array.from(data.normalize());
  let arr: string[] = [];

  for (let i = 0; i < str.length; i++) {
    const curr = str.at(i) ?? "";
    const next = str.at(i + 1) ?? "";

    if (curr === "реС") {
      arr.push("\\'");
      continue;
    }

    if (curr === "реТ") {
      arr.push("\\`");
      continue;
    }

    const val = devanagariDataDict.get(curr) ?? curr;
    const next_val = devanagariDataDict.get(next) ?? next;

    if (
      [...devanagariCharDict.vowels.values()].includes(curr) &&
      [...devanagariCharDict.consonants.values()].includes(next)
    ) {
      arr.push(`${val}\\`);
      continue;
    }

    if (unAspiratedConsonants.includes(val) && next_val === "h") {
      arr.push(`${val}a`);
      continue;
    }

    arr.push(val);
  }

  return arr.join("").normalize();
}

/**
 * Convert SLP1 to IAST
 *
 * @param data SLP1 string
 * @returns IAST string
 */
function slpToIAST(data: string): string {
  return Array.from(data)
    .map(i => slpDataDict.get(i) ?? "")
    .join("")
    .normalize();
}

type FuncList = "handleUnicode" | "dataFunction" | "scriptToDevanagari";

type Builder = {
  [k in LangList]: {
    [f in FuncList]: ReturnType<
      typeof createDataFunction &
        typeof createHandleUnicode &
        typeof createScriptFunction
    >;
  };
};

function makeBuilder(): Builder {
  const y: Partial<Builder> = {};
  for (const l of langs) {
    y[l] = {
      dataFunction: createDataFunction(l),
      handleUnicode: createHandleUnicode(l),
      scriptToDevanagari: createScriptFunction(l),
    };
  }

  return y as Required<Builder>;
}

const builderFuncs = makeBuilder();

export const convertor: {
  readonly [from: string]: {
    readonly [to: string]: readonly ((data: string) => string)[];
  };
} = {
  uast: {
    iast: [builderFuncs["sa"]["handleUnicode"], dataToIAST],
    devanagari: [
      builderFuncs["sa"]["handleUnicode"],
      builderFuncs["sa"]["dataFunction"],
    ],
    gu: [
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  raw: {
    iast: [builderFuncs["sa"]["handleUnicode"]],
    devanagari: [
      builderFuncs["sa"]["handleUnicode"],
      iastToUAST,
      builderFuncs["sa"]["handleUnicode"],
      builderFuncs["sa"]["dataFunction"],
    ],
    uast: [builderFuncs["sa"]["handleUnicode"], iastToUAST],
    gu: [
      builderFuncs["gu"]["handleUnicode"],
      iastToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      builderFuncs["or"]["handleUnicode"],
      iastToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      builderFuncs["kn"]["handleUnicode"],
      iastToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      builderFuncs["te"]["handleUnicode"],
      iastToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      builderFuncs["ml"]["handleUnicode"],
      iastToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      builderFuncs["ta"]["handleUnicode"],
      iastToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  slp: {
    iast: [slpToIAST],
    uast: [slpToIAST, iastToUAST],
    devanagari: [
      slpToIAST,
      iastToUAST,
      builderFuncs["sa"]["handleUnicode"],
      builderFuncs["sa"]["dataFunction"],
    ],
    gu: [
      slpToIAST,
      iastToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      slpToIAST,
      iastToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      slpToIAST,
      iastToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      slpToIAST,
      iastToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      slpToIAST,
      iastToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      slpToIAST,
      iastToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  devanagari: {
    uast: [devanagariToUAST],
    iast: [devanagariToUAST, builderFuncs["sa"]["handleUnicode"], dataToIAST],
    gu: [
      devanagariToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      devanagariToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      devanagariToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      devanagariToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      devanagariToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      devanagariToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  iast: {
    uast: [iastToUAST],
    devanagari: [
      iastToUAST,
      builderFuncs["sa"]["handleUnicode"],
      builderFuncs["sa"]["dataFunction"],
    ],
    gu: [
      iastToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      iastToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      iastToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      iastToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      iastToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      iastToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  gu: {
    devanagari: [builderFuncs["gu"]["scriptToDevanagari"]],
    uast: [builderFuncs["gu"]["scriptToDevanagari"], devanagariToUAST],
    iast: [
      builderFuncs["gu"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["sa"]["handleUnicode"],
      dataToIAST,
    ],
    or: [
      builderFuncs["gu"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      builderFuncs["gu"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      builderFuncs["gu"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      builderFuncs["gu"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      builderFuncs["gu"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  or: {
    devanagari: [builderFuncs["or"]["scriptToDevanagari"]],
    uast: [builderFuncs["or"]["scriptToDevanagari"], devanagariToUAST],
    iast: [
      builderFuncs["or"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["sa"]["handleUnicode"],
      dataToIAST,
    ],
    gu: [
      builderFuncs["or"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    kn: [
      builderFuncs["or"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      builderFuncs["or"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      builderFuncs["or"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      builderFuncs["or"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  kn: {
    devanagari: [builderFuncs["kn"]["scriptToDevanagari"]],
    uast: [builderFuncs["kn"]["scriptToDevanagari"], devanagariToUAST],
    iast: [
      builderFuncs["kn"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["sa"]["handleUnicode"],
      dataToIAST,
    ],
    gu: [
      builderFuncs["kn"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      builderFuncs["kn"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    te: [
      builderFuncs["kn"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      builderFuncs["kn"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      builderFuncs["kn"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  te: {
    devanagari: [builderFuncs["te"]["scriptToDevanagari"]],
    uast: [builderFuncs["te"]["scriptToDevanagari"], devanagariToUAST],
    iast: [
      builderFuncs["te"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["sa"]["handleUnicode"],
      dataToIAST,
    ],
    gu: [
      builderFuncs["te"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      builderFuncs["te"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      builderFuncs["te"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    ml: [
      builderFuncs["te"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
    ta: [
      builderFuncs["te"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  ml: {
    devanagari: [builderFuncs["ml"]["scriptToDevanagari"]],
    uast: [builderFuncs["ml"]["scriptToDevanagari"], devanagariToUAST],
    iast: [
      builderFuncs["ml"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["sa"]["handleUnicode"],
      dataToIAST,
    ],
    gu: [
      builderFuncs["ml"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      builderFuncs["ml"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      builderFuncs["ml"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      builderFuncs["ml"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ta: [
      builderFuncs["ml"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ta"]["handleUnicode"],
      builderFuncs["ta"]["dataFunction"],
    ],
  },
  ta: {
    devanagari: [builderFuncs["ta"]["scriptToDevanagari"]],
    uast: [builderFuncs["ta"]["scriptToDevanagari"], devanagariToUAST],
    iast: [
      builderFuncs["ta"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["sa"]["handleUnicode"],
      dataToIAST,
    ],
    gu: [
      builderFuncs["ta"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["gu"]["handleUnicode"],
      builderFuncs["gu"]["dataFunction"],
    ],
    or: [
      builderFuncs["ta"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["or"]["handleUnicode"],
      builderFuncs["or"]["dataFunction"],
    ],
    kn: [
      builderFuncs["ta"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["kn"]["handleUnicode"],
      builderFuncs["kn"]["dataFunction"],
    ],
    te: [
      builderFuncs["ta"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["te"]["handleUnicode"],
      builderFuncs["te"]["dataFunction"],
    ],
    ml: [
      builderFuncs["ta"]["scriptToDevanagari"],
      devanagariToUAST,
      builderFuncs["ml"]["handleUnicode"],
      builderFuncs["ml"]["dataFunction"],
    ],
  },
} as const;
